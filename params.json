{"name":"sqlsn-core","tagline":"sqlsn core module","body":"# Idea\r\n\r\n**SQLSN** should be simple Oracle SQL\\*Plus library of scripts, which make SQL\\*Plus a little bit more comfortable.\r\n\r\nIt is a collection of scripts, which I tend to write all over again on each new project. Scripts for managing connections, environments, various action scripts, calling scripts organized in directory structure and so on ...\r\n\r\n## Goals\r\n\r\n* pure SQL*Plus, at least I will try \r\n* simple core\r\n* organize scripts in reusable, ideally self-contained modules, with loosely coupled dependencies\r\n* document and test everything\r\n\r\n## Module\r\n\r\n### Should\r\n* have its own repository\r\n* be self-contained in directory which can be put in `sqlsn_modules` without breaking anything\r\n* be well documented and tested\r\n\r\n### Defines\r\n* module variables named `g_<module_name>_%` - other modules may depend on them\r\n* module command scripts named `<module_name>_<command>` - scripts stored in `<module_name>/lib` implementing commands\r\n    \r\n### Uses\r\n* module variables and command scripts defined by other modules\r\n* directory `lib/tmp` for on-the-fly created and executed SQL*Plus scripts which implement missing language constructs\r\n\r\n\r\n## Feature roadmap\r\n\r\n**Core and near-core modules which do not need connection to database**\r\n\r\n* sqlsn-core - [done]\r\n* sqlsn-stack - module implementing stack [done]\r\n* sqlsn-log - module implementing simple logging into file [in progress]\r\n* sqlsn-run - module implementing runing scripts/directory trees of scripts [done]\r\n\r\n**Modules that manage connections**\r\n\r\n* sqlsn-conn - module for connection configurations [in design phase]\r\n* sqlsn-env - module for environment definitions [in design phase]\r\n* sqlsn-log-db - logging into database [in design phase]\r\n\r\n**\"Music of the Future (word-by-word translation from czech/slovak ;)\"**\r\n\r\n* module repository with \r\n    * declarative module dependency\r\n    * (multi)platform (in)dependant scripts that can pull modules from repository\r\n\r\n# SQLSN - core\r\n\r\nThis is the core module - heart of **SQLSN**. Ãœber-simple heart. At least it starts as simple ;) We'll see.\r\n\r\n# Usage\r\n\r\nModule name is `sqlsn` so in \"applications\" written using SQLSN substitution variables starting with `g_sqlsn` or `sqlsn` should be avoided.\r\n\r\n## Initialize module\r\n\r\nInitialize SQLSN core module prior any usage.\r\n\r\n````\r\nprompt tell SQLSN core where it is located regarding to THE-SCRIPT\r\n@<path_to_sqlsn_core>/module.sql <path_to_sqlsn_core>\r\n````\r\n\r\ne.g.:\r\n\r\n````\r\n--in THE-SCRIPT test/test.sql\r\n@../module.sql \"..\"\r\n\r\n````\r\n\r\n## Requirements\r\n\r\n### g_sqlsn_modules_path\r\n\r\nPath to SQLSN modules from THE-SCRIPT. Set it in some `sqlsnrc.sql` script. (Example can be found in `test`)\r\n\r\n## Globals\r\n\r\nGlobals defined by core module\r\n\r\n### g_sqlsn_path\r\n\r\nPath to SQLSN core from THE-SCRIPT. It is set in `module.sql` script during initilization of sqlsn-core.\r\n\r\n## Module command scripts\r\n\r\nCommand scripts provided by the core module. Path to the script is stored in substition variable, so calling is pretty simple:\r\n\r\n````\r\n@&&<module_name>_<command>\r\n````\r\n\r\n### sqslsn_require\r\n\r\nLoads required module. If modules are placed somwhere else, as default `g_sqlsn_modules_path` than override `g_sqlsn_modules_path` manually.\r\n\r\n````\r\n@&&sqlsn_require <module_name>\r\n````\r\n\r\n### sqslsn_require_from_path\r\n\r\nLoads required module from path.\r\n\r\n````\r\n@&&sqlsn_require_from_path \"<path/module_name>\"\r\n````\r\n\r\n### sqlsn_noop\r\n\r\nNo op command - use it as mock for functionality that is currently not implemented.\r\n\r\n````\r\ndefine future_command = &&sqlsn_noop\r\n````\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}